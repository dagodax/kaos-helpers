#!/bin/bash
# Writen for Kaos Linux by MerMouY inspiration from                                               
# Dangermouse davidmwilks@gmail.com http://autoten.co.uk/

# GNU General Public License 3 <http://www.gnu.org/licenses/gpl-3.0.html>
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

# No Warranty or guarantee of suitability exists for this software
# Use at your own risk. The author is not responsible if your system breaks.    

#################################################################################################################################      
Depends=('qarma')
#################################################################################################################################
LC_ALL=C  
LOG=/tmp/kaos-postinstall.log #TODO:better logging system
Sudo="/usr/bin/kdesu"
Paconf=$HOME/pacman.conf
Zopts="--title=$0"
cancelled=n 	
Repo_def="
[build]
Include /etc/pacman.d/mirrorlist"

Option_rlist=( '[build] Repository' 'Dot files' 'Kaos Hacks' 'Show Me... ' )

Option_desc=( 'Add and enable [build] Repository in pacman' \
'Classical useful dot files with aliases' \
'Some easy configurations you may need, or not' \
'Cheat lists and few tools' )

Soft_lst=( 'flashplugin' 'kfoldersync' 'df' 'htop' 'libmatroka' 'eg' 'alexandra' 'liri-browser' 'optipng' 'jpegoptim' 'yad' 'mkvtoolnix' 'handbrake' 'youtube-dl-applet' 'rtfg' 'bup' 'pacmanlogviewer' 'abs' 'sqliteman' 'fonts' 'opera' ) #TODO for better eye candy: If needed as a 1 file per app folder?

#################################################################################################################################                                                         
typeset -r PAC="`which pacman`"
typeset -r PERL="`which perl`"
typeset -r KCP="`which kcp`"
typeset -r Zen="`which zenity`"

#################################################################################################################################
###: Basic functions utilities :###
# Messaging system
Msg() {
    case $# in
	1) log_it "$1" && disp_it "$1";;
	2) case "$1" in 
		error)	log_it "$2" && disp_it no "$2" && return 0 ;;
		quest)	log_it "$2" && return "$(quest_it \"$1\")" ;;
		entry)	log_it "$2" && return "$(entry_it \"$1\")" ;;
		errorf) log_it "$2" && disp_it no "$2" && exit 1 ;;
		done)	$(disp_it ok ${2}) && return 0 || return 1;; # should log_it "$2" before
	    esac;;
	*) if [ "$1" = "doing" ];then
		shift
		log_it "$1" && do_it "$@" && return 0
	   else exit 1
	   fi;;
    esac
}

do_it() {
fifocreate

report_progress() {  # Print progress, and catch cancel
    if [ "${cancelled}" = "n" ]; then
        printf "%s\n" "${1}" >&6 2>/dev/null
    else                                     
        return 1
    fi
}

# Catch cancel:
trap_cancel() {
    cancelled=y
    cat "${fifo}" >/dev/null 2>&1 &
}
trap trap_cancel SIGHUP

$Zen $Zopts --progress --text="Avancement..." --percentage=0 \
--auto-close --auto-kill >/dev/null 2>&1 <"${fifo}" & progress_pid="${!}"

trap_int() {
    kill -9 ${progress_pid}
    exec 6>&-
    rm -rf "${fifo_dir}"
    printf 'Argh, user killed us... :-(\n'
    exit 1
}
trap trap_int SIGINT

# Opening FD#6 for writing
exec 6>"${fifo}"

# Run the job
c=$(( 100/$# ))
s=$(( $#+1 ))
for(( i=0; i<=$s; i++ ))
do
    report_progress "$(($i*${c}))" || break;
done

# End of job
fifo_destroy

if [ "${cancelled}" = "y" ]; then
    printf "Argh, user cancelled us... :-(\n"
fi
}

disp_it() {
    mood="$1"
    shift
    case ${mood} in
	ok) ${Zen} ${Zopts} --info --text="${*}" --ok-label='Got it!'
	if [ "$?" = "1" ];then return 0;else return 1;fi;;
	*) ${Zen} ${Zopts} --error --text="${@}" 
	if [ "$?" = "1" ];then return 0;else return 1;fi;;
    esac
}

quest_it() {
    $Zen --question --text="$1" --icon-name=im-jabber --yes-button="Ok/Yes" --no-button="No/Cancel"
    return $?
}

entry_it() {
    rep="$($Zen --entry --text="$1" --icon-name=im-jabber)"
    if [ $? = 0 ];then 
	return "${rep}"
    else return 1
    fi
}

log_it() {
    echo "$1" >> $LOG 
}

## FIFOS

fifocreate() {
    fifo_dir="$( mktemp -d )" 
    fifo="${fifo_dir}/fifo"
    mkfifo "${fifo}"
}

pstatus() {
    [ sudo pacman -Q "$1" 2> /dev/null ] && echo "True" || echo "False"
}

#################################################################################################################################

###: BUILD REPOSITORY :###

repo_exist() {
    if [ -z "$(fgrep '#[build]' ${Paconf})" ] && [ -z "$(fgrep '[build]' ${Paconf})" ];then 	# Not present => Add it
	echo -e "${Repo_def}" | sudo tee -a "${Paconf}"
	$(Msg done 'Successfully added <b>[build]</b> repository to: <b>/etc/pacman.conf</b>') && return 0 || return 1
    elif [ -n "$(fgrep '#[build]' ${Paconf})" ];then 	# Commented => Uncomment
	Msg doing "Activate build repo" "sed -i 's/#\[build\]/[build]/;s/#Include/Include/' ${Paconf}" || return 1	#TODO:what if another '#Include' ? Must be a better solution
	return 0
    elif [ -n "$(fgrep '[build]' ${Paconf})" ];then 	# Is present and uncommented
	return 0
    else return 1 	# Something is going wrong?
    fi
}

#################################################################################################################################
###: VERIF :###

# Need root privileges! Does kdesu keep privilèges?
if [[ $EUID -ne 0 ]]; then
 	$(Msg errorf "<span color='red' size='large'>This script must be run by root</span>
<span size='normal'>Please preceed $0 with kdesu like:</span>
<span color='black'>$<span> kdesu -c $0")
#exit 1
fi

# Checking actual state
# repo_exist

# Msg errorf "Repository doesn't exist or <span background='grey' size='large'>/etc/pacman.conf</span> is not writable...\nEnding..."

#################################################################################################################################
###: Main menu :###
# Arrange lists for zenity
fifocreate
6>"${fifo}"

Col_head() {
    c in "State" "Name" "Categorie" "Details"
    do echo --column=\"${c}\":
	shift
    done
}

nb=$(echo "${#Option_rlist[@]}")
let nb--

for i in $(seq 0 ${nb})
    do echo FALSE:"${Option_rlist[$i]}":"${Option_desc[$i]}":"$i"
done | 6> "${fifo}"

${Zen} ${Zopts} --radiolist \
    --text="Sélectionner une catégorie ci-dessous: \n" \
    --height=400 --width=600 --print-column=ALL \
    Col_head \
    cat ${U_entry}
    2>"${fifo}"

case "${fifo}" in
    *) echo "";;
esac

trap - SIGHUP SIGINT
exec 6>&-
rm -rf "${fifo_dir}"
exit 0

# ${Zen} ${Zopts} --checklist \
#     --title=Choose what you need to activate/install.
#     --height=500 --width=600 \
#  "leaf" "Leafpad, Ã©diteur de texte (bloc-notes)" `if [ $UPDATE = "yes" ]; then pstatus leafpad; else echo "on"; fi` \
#  "gpic" "Gpicview, visionneur d'images" `if [ $UPDATE = "yes" ]; then pstatus gpicview; else echo "on"; fi` \
#2> $U_entry

# Activation=$(cat $U_entry)
# 
# case $Activation in
#     1) echo 1;;
#     2) echo 2;;
# esac
